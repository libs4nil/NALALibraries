// License Information:
// KettingKaart.nlb/KettingKaart.nil
// KettingKaart
// version: 19.12.30
// Copyright (C)  Jeroen P. Broks
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information
#use "libs/strings"

void Chainer(kth,gtl,string naar,string van)
	CSayF("= Requested chain to '%s', from '%s'",naar,van)
	gtl(naar,"From_"..van)
end

module m_KettingKaart
	
	delegate ZA_Enter
	delegate GoToLayer
	int TLen = 3
	string prefix = "#"
	
	void CONSTRUCTOR()
	end
	
	void Init(kth)
		assert(self.ZA_Enter ,"You cannot init KettingKaart without setting KettingKaart.ZA_Enter to a delegate function << void(string,function) >> first")
		assert(self.GoToLayer,"You cannot init KettingKaart without setting KettingKaart.GoToLayer to a delegate function << void(string,string) >> first")
		var OldLay
		OldLay = kth.Layer
		for Lay in kth.EachLayer
			CSayF("= Chains on Layer %s",Lay)
			kth.Layer = Lay
			for Tag in kth.EachTag(Lay)
				if prefixed(Tag:upper(),"CHAIN_")
					CSay("KettingKaart (On layer: "..Lay..": "..Tag.." => "..self.prefix..right(Tag,self.TLen).."."..right(Lay,self.TLen))
					self.ZA_Enter(Tag,Chainer,kth,self.GoToLayer,self.prefix..right(Tag,self.TLen),right(Lay,self.TLen))
				end
			end
		end
	end

end